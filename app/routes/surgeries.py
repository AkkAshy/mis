from fastapi import APIRouter, Depends, HTTPException, Query
from sqlalchemy.orm import Session
from typing import List, Optional
from app.db.session import get_db
from app.schemas.surgery import SurgeryCreate, Surgery, SurgeryUpdate, SurgeryWithDetails
from app.models.surgery import Surgery as SurgeryModel
from app.models.patient import Patient as PatientModel
from app.models.user import User
from app.utils.dependencies import get_current_user
import logging
import traceback

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

router = APIRouter()

@router.post("/", response_model=Surgery)
def create_surgery(
    surgery: SurgeryCreate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –≤—Ä–∞—á –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å)
    """
    try:
        logger.info("=" * 80)
        logger.info("üîµ –ù–ê–ß–ê–õ–û –°–û–ó–î–ê–ù–ò–Ø –û–ü–ï–†–ê–¶–ò–ò")
        logger.info(f"üë§ Doctor user: {current_user.username} (ID: {current_user.id})")
        logger.info(f"üë§ Patient ID: {surgery.patient_id}")
        logger.info(f"üë®‚Äç‚öïÔ∏è Surgeon ID: {surgery.surgeon_id}")
        logger.info(f"üî™ Operation: {surgery.operation_name}")
        logger.info(f"üìÖ Date: {surgery.operation_date}")

        # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –≤—Ä–∞—á)
        logger.info("üîç –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
        if current_user.role != "doctor":
            logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {current_user.username} –Ω–µ –∏–º–µ–µ—Ç —Ä–æ–ª–∏ doctor")
            raise HTTPException(status_code=403, detail="Only doctors can create surgeries")
        logger.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞")

        # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞
        logger.info("üîç –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞...")
        patient = db.query(PatientModel).filter(PatientModel.id == surgery.patient_id).first()
        if not patient:
            logger.warning(f"‚ö†Ô∏è –ü–∞—Ü–∏–µ–Ω—Ç —Å ID {surgery.patient_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            raise HTTPException(status_code=400, detail="Patient not found")
        logger.info("‚úÖ –ü–∞—Ü–∏–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ö–∏—Ä—É—Ä–≥–∞
        logger.info("üîç –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ö–∏—Ä—É—Ä–≥–∞...")
        surgeon = db.query(User).filter(User.id == surgery.surgeon_id, User.role == "doctor").first()
        if not surgeon:
            logger.warning(f"‚ö†Ô∏è –•–∏—Ä—É—Ä–≥ —Å ID {surgery.surgeon_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            raise HTTPException(status_code=400, detail="Surgeon not found")
        logger.info("‚úÖ –•–∏—Ä—É—Ä–≥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        # –®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
        logger.info("üìù –®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏...")
        surgery_data = surgery.dict()
        surgery_data["created_by"] = current_user.id
        db_surgery = SurgeryModel(**surgery_data)
        logger.info("‚úÖ –û–±—ä–µ–∫—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω")

        # –®–∞–≥ 5: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–µ—Å—Å–∏—é –ë–î
        logger.info("üíæ –®–∞–≥ 5: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –ë–î...")
        db.add(db_surgery)
        db.commit()
        db.refresh(db_surgery)
        logger.info(f"‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {db_surgery.id}")

        logger.info("=" * 80)
        logger.info("‚úÖ –°–û–ó–î–ê–ù–ò–ï –û–ü–ï–†–ê–¶–ò–ò –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–û")
        logger.info("=" * 80)

        return db_surgery

    except HTTPException:
        raise
    except Exception as e:
        logger.error("=" * 80)
        logger.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–†–ò –°–û–ó–î–ê–ù–ò–ò –û–ü–ï–†–ê–¶–ò–ò")
        logger.error(f"Error: {str(e)}")
        logger.error(f"Traceback:\n{traceback.format_exc()}")
        logger.error("=" * 80)
        raise HTTPException(status_code=500, detail=f"Unexpected error: {str(e)}")

@router.get("/", response_model=List[SurgeryWithDetails])
def get_surgeries(
    patient_id: Optional[int] = Query(None, description="Filter by patient ID"),
    surgeon_id: Optional[int] = Query(None, description="Filter by surgeon ID"),
    skip: int = Query(0, ge=0),
    limit: int = Query(100, ge=1, le=100),
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π (–≤—Ä–∞—á–∏ –≤–∏–¥—è—Ç —Å–≤–æ–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏, reception –≤—Å–µ)
    """
    if current_user.role not in ["doctor", "reception"]:
        raise HTTPException(status_code=403, detail="Not authorized")

    query = db.query(
        SurgeryModel,
        PatientModel.full_name.label("patient_full_name"),
        User.full_name.label("surgeon_full_name")
    ).join(
        PatientModel, SurgeryModel.patient_id == PatientModel.id
    ).join(
        User, SurgeryModel.surgeon_id == User.id
    )

    # –§–∏–ª—å—Ç—Ä—ã
    if patient_id:
        query = query.filter(SurgeryModel.patient_id == patient_id)
    if surgeon_id:
        query = query.filter(SurgeryModel.surgeon_id == surgeon_id)

    # –í—Ä–∞—á–∏ –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
    if current_user.role == "doctor":
        query = query.filter(SurgeryModel.surgeon_id == current_user.id)

    results = query.offset(skip).limit(limit).all()

    surgeries = []
    for surgery, patient_full_name, surgeon_full_name in results:
        surgery_data = SurgeryWithDetails(
            id=surgery.id,
            patient_id=surgery.patient_id,
            patient_full_name=patient_full_name,
            surgeon_id=surgery.surgeon_id,
            surgeon_full_name=surgeon_full_name,
            operation_name=surgery.operation_name,
            operation_date=surgery.operation_date,
            start_time=surgery.start_time,
            end_time=surgery.end_time,
            pre_op_days=surgery.pre_op_days,
            post_op_days=surgery.post_op_days,
            notes=surgery.notes,
            complications=surgery.complications,
            outcome=surgery.outcome,
            additional_data=surgery.additional_data,
            created_by=surgery.created_by,
            created_at=surgery.created_at,
            updated_at=surgery.updated_at
        )
        surgeries.append(surgery_data)

    return surgeries

@router.get("/{surgery_id}", response_model=SurgeryWithDetails)
def get_surgery(
    surgery_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    """
    if current_user.role not in ["doctor", "reception"]:
        raise HTTPException(status_code=403, detail="Not authorized")

    result = db.query(
        SurgeryModel,
        PatientModel.full_name.label("patient_full_name"),
        User.full_name.label("surgeon_full_name")
    ).join(
        PatientModel, SurgeryModel.patient_id == PatientModel.id
    ).join(
        User, SurgeryModel.surgeon_id == User.id
    ).filter(SurgeryModel.id == surgery_id).first()

    if not result:
        raise HTTPException(status_code=404, detail="Surgery not found")

    surgery, patient_full_name, surgeon_full_name = result

    # –í—Ä–∞—á–∏ –º–æ–≥—É—Ç –≤–∏–¥–µ—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
    if current_user.role == "doctor" and surgery.surgeon_id != current_user.id:
        raise HTTPException(status_code=403, detail="Not authorized to view this surgery")

    return SurgeryWithDetails(
        id=surgery.id,
        patient_id=surgery.patient_id,
        patient_full_name=patient_full_name,
        surgeon_id=surgery.surgeon_id,
        surgeon_full_name=surgeon_full_name,
        operation_name=surgery.operation_name,
        operation_date=surgery.operation_date,
        start_time=surgery.start_time,
        end_time=surgery.end_time,
        pre_op_days=surgery.pre_op_days,
        post_op_days=surgery.post_op_days,
        notes=surgery.notes,
        complications=surgery.complications,
        outcome=surgery.outcome,
        additional_data=surgery.additional_data,
        created_by=surgery.created_by,
        created_at=surgery.created_at,
        updated_at=surgery.updated_at
    )

@router.patch("/{surgery_id}", response_model=Surgery)
def update_surgery(
    surgery_id: int,
    surgery_update: SurgeryUpdate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ —Ö–∏—Ä—É—Ä–≥ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ reception)
    """
    if current_user.role not in ["doctor", "reception"]:
        raise HTTPException(status_code=403, detail="Not authorized")

    surgery = db.query(SurgeryModel).filter(SurgeryModel.id == surgery_id).first()
    if not surgery:
        raise HTTPException(status_code=404, detail="Surgery not found")

    # –í—Ä–∞—á–∏ –º–æ–≥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
    if current_user.role == "doctor" and surgery.surgeon_id != current_user.id:
        raise HTTPException(status_code=403, detail="Not authorized to update this surgery")

    update_data = surgery_update.dict(exclude_unset=True)
    for field, value in update_data.items():
        setattr(surgery, field, value)

    db.commit()
    db.refresh(surgery)
    return surgery

@router.delete("/{surgery_id}")
def delete_surgery(
    surgery_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ reception)
    """
    if current_user.role != "reception":
        raise HTTPException(status_code=403, detail="Only reception can delete surgeries")

    surgery = db.query(SurgeryModel).filter(SurgeryModel.id == surgery_id).first()
    if not surgery:
        raise HTTPException(status_code=404, detail="Surgery not found")

    db.delete(surgery)
    db.commit()
    return {"message": "Surgery deleted successfully"}