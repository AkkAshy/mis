from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from app.db.session import get_db
from app.schemas.user import UserCreate, UserLogin, Token
from app.models.user import User
from app.core.security import get_password_hash, verify_password, create_access_token
import logging
import traceback

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

router = APIRouter()

@router.post("/register", response_model=Token)
def register(user: UserCreate, db: Session = Depends(get_db)):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    """
    try:
        logger.info("=" * 80)
        logger.info("üîµ –ù–ê–ß–ê–õ–û –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø")
        logger.info(f"üìù Username: {user.username}")
        logger.info(f"üìù Email: {user.email}")
        logger.info(f"üìù Full name: {user.full_name}")
        logger.info(f"üìù Role: {user.role}")
        logger.info(f"üìù Password length: {len(user.password) if user.password else 0} chars")
        
        # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ username
        logger.info("üîç –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è username...")
        try:
            db_user = db.query(User).filter(User.username == user.username).first()
            if db_user:
                logger.warning(f"‚ö†Ô∏è Username '{user.username}' —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
                raise HTTPException(
                    status_code=400, 
                    detail=f"Username '{user.username}' already registered"
                )
            logger.info("‚úÖ Username —Å–≤–æ–±–æ–¥–µ–Ω")
        except HTTPException:
            raise
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ username: {str(e)}")
            logger.error(f"Traceback: {traceback.format_exc()}")
            raise HTTPException(status_code=500, detail=f"Database error checking username: {str(e)}")
        
        # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ email
        logger.info("üîç –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è email...")
        try:
            db_user = db.query(User).filter(User.email == user.email).first()
            if db_user:
                logger.warning(f"‚ö†Ô∏è Email '{user.email}' —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
                raise HTTPException(
                    status_code=400, 
                    detail=f"Email '{user.email}' already registered"
                )
            logger.info("‚úÖ Email —Å–≤–æ–±–æ–¥–µ–Ω")
        except HTTPException:
            raise
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ email: {str(e)}")
            logger.error(f"Traceback: {traceback.format_exc()}")
            raise HTTPException(status_code=500, detail=f"Database error checking email: {str(e)}")
        
        # –®–∞–≥ 3: –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
        logger.info("üîê –®–∞–≥ 3: –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è...")
        try:
            logger.info(f"   Password type: {type(user.password)}")
            logger.info(f"   Password value (first 5 chars): {str(user.password)[:5]}...")
            
            hashed_password = get_password_hash(user.password)
            
            logger.info(f"   Hashed password length: {len(hashed_password)}")
            logger.info(f"   Hashed password (first 20 chars): {hashed_password[:20]}...")
            logger.info("‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞—Ä–æ–ª—è: {str(e)}")
            logger.error(f"Traceback: {traceback.format_exc()}")
            raise HTTPException(status_code=500, detail=f"Password hashing error: {str(e)}")
        
        # –®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.info("üë§ –®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        try:
            db_user = User(
                username=user.username,
                full_name=user.full_name,
                email=user.email,
                hashed_password=hashed_password,
                role=user.role
            )
            logger.info(f"   User object created: {db_user}")
            logger.info("‚úÖ –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–∑–¥–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
            logger.error(f"Traceback: {traceback.format_exc()}")
            raise HTTPException(status_code=500, detail=f"User object creation error: {str(e)}")
        
        # –®–∞–≥ 5: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–µ—Å—Å–∏—é –ë–î
        logger.info("üíæ –®–∞–≥ 5: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î...")
        try:
            db.add(db_user)
            logger.info("   User added to session")
            logger.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–µ—Å—Å–∏—é")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ —Å–µ—Å—Å–∏—é: {str(e)}")
            logger.error(f"Traceback: {traceback.format_exc()}")
            raise HTTPException(status_code=500, detail=f"Database session error: {str(e)}")
        
        # –®–∞–≥ 6: –ö–æ–º–º–∏—Ç –≤ –ë–î
        logger.info("üíæ –®–∞–≥ 6: –ö–æ–º–º–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ë–î...")
        try:
            db.commit()
            logger.info("   Commit successful")
            logger.info("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–º–º–∏—Ç–µ: {str(e)}")
            logger.error(f"Traceback: {traceback.format_exc()}")
            db.rollback()
            logger.info("   Rollback executed")
            raise HTTPException(status_code=500, detail=f"Database commit error: {str(e)}")
        
        # –®–∞–≥ 7: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
        logger.info("üîÑ –®–∞–≥ 7: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        try:
            db.refresh(db_user)
            logger.info(f"   User ID: {db_user.id}")
            logger.info("‚úÖ –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞: {str(e)}")
            logger.error(f"Traceback: {traceback.format_exc()}")
            # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        
        # –®–∞–≥ 8: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
        logger.info("üîë –®–∞–≥ 8: –°–æ–∑–¥–∞–Ω–∏–µ access token...")
        try:
            access_token = create_access_token(data={"sub": user.username})
            logger.info(f"   Token created (first 20 chars): {access_token[:20]}...")
            logger.info("‚úÖ –¢–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {str(e)}")
            logger.error(f"Traceback: {traceback.format_exc()}")
            raise HTTPException(status_code=500, detail=f"Token creation error: {str(e)}")
        
        logger.info("=" * 80)
        logger.info("‚úÖ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–ê")
        logger.info(f"   User ID: {db_user.id}")
        logger.info(f"   Username: {db_user.username}")
        logger.info(f"   Email: {db_user.email}")
        logger.info(f"   Role: {db_user.role}")
        logger.info("=" * 80)
        
        return {"access_token": access_token, "token_type": "bearer"}
        
    except HTTPException:
        # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º HTTPException –¥–∞–ª—å—à–µ
        raise
    except Exception as e:
        logger.error("=" * 80)
        logger.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–†–ò –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò")
        logger.error(f"Error type: {type(e).__name__}")
        logger.error(f"Error message: {str(e)}")
        logger.error(f"Traceback:\n{traceback.format_exc()}")
        logger.error("=" * 80)
        raise HTTPException(
            status_code=500, 
            detail=f"Unexpected registration error: {str(e)}"
        )

@router.post("/login", response_model=Token)
def login(user: UserLogin, db: Session = Depends(get_db)):
    """
    –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    """
    try:
        logger.info("=" * 80)
        logger.info("üîµ –ù–ê–ß–ê–õ–û –í–•–û–î–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø")
        logger.info(f"üìù Username: {user.username}")
        logger.info(f"üìù Password length: {len(user.password) if user.password else 0} chars")
        
        # –®–∞–≥ 1: –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.info("üîç –®–∞–≥ 1: –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î...")
        try:
            db_user = db.query(User).filter(User.username == user.username).first()
            if not db_user:
                logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user.username}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                raise HTTPException(
                    status_code=400, 
                    detail="Incorrect username or password"
                )
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω (ID: {db_user.id})")
        except HTTPException:
            raise
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
            logger.error(f"Traceback: {traceback.format_exc()}")
            raise HTTPException(status_code=500, detail=f"Database error: {str(e)}")
        
        # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
        logger.info("üîê –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è...")
        try:
            logger.info(f"   Input password type: {type(user.password)}")
            logger.info(f"   Stored hash length: {len(db_user.hashed_password)}")
            
            is_valid = verify_password(user.password, db_user.hashed_password)
            
            logger.info(f"   Password verification result: {is_valid}")
            
            if not is_valid:
                logger.warning(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{user.username}'")
                raise HTTPException(
                    status_code=400, 
                    detail="Incorrect username or password"
                )
            logger.info("‚úÖ –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π")
        except HTTPException:
            raise
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—Ä–æ–ª—è: {str(e)}")
            logger.error(f"Traceback: {traceback.format_exc()}")
            raise HTTPException(status_code=500, detail=f"Password verification error: {str(e)}")
        
        # –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
        logger.info("üîë –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ access token...")
        try:
            access_token = create_access_token(data={"sub": user.username})
            logger.info(f"   Token created (first 20 chars): {access_token[:20]}...")
            logger.info("‚úÖ –¢–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {str(e)}")
            logger.error(f"Traceback: {traceback.format_exc()}")
            raise HTTPException(status_code=500, detail=f"Token creation error: {str(e)}")
        
        logger.info("=" * 80)
        logger.info("‚úÖ –í–•–û–î –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù")
        logger.info(f"   User ID: {db_user.id}")
        logger.info(f"   Username: {db_user.username}")
        logger.info(f"   Role: {db_user.role}")
        logger.info("=" * 80)
        
        return {"access_token": access_token, "token_type": "bearer"}
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error("=" * 80)
        logger.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–†–ò –í–•–û–î–ï")
        logger.error(f"Error type: {type(e).__name__}")
        logger.error(f"Error message: {str(e)}")
        logger.error(f"Traceback:\n{traceback.format_exc()}")
        logger.error("=" * 80)
        raise HTTPException(
            status_code=500, 
            detail=f"Unexpected login error: {str(e)}"
        )
