from fastapi import APIRouter, Depends, HTTPException, Query
from sqlalchemy.orm import Session
from typing import List, Optional
from app.db.session import get_db
from app.schemas.appointment import AppointmentCreate, Appointment, AppointmentWithDoctor, AppointmentCostUpdate
from app.schemas.patient import Patient
from app.schemas.user import UserProfile
from app.models.appointment import Appointment as AppointmentModel
from app.models.patient import Patient as PatientModel
from app.utils.dependencies import get_current_user
from app.models.user import User
import logging
import traceback

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

router = APIRouter()

@router.post("/", response_model=Appointment)
def create_appointment(appointment: AppointmentCreate, db: Session = Depends(get_db), current_user: User = Depends(get_current_user)):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–µ–º–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    """
    try:
        logger.info("=" * 80)
        logger.info("üîµ –ù–ê–ß–ê–õ–û –°–û–ó–î–ê–ù–ò–Ø –ü–†–ò–ï–ú–ê")
        logger.info(f"üë§ Reception user: {current_user.username} (ID: {current_user.id})")
        logger.info(f"üë®‚Äç‚öïÔ∏è Doctor ID: {appointment.doctor_id}")
        logger.info(f"üë§ Patient ID: {appointment.patient_id}")
        logger.info(f"üìÖ Date: {appointment.date}")
        logger.info(f"üìù Notes: {appointment.notes}")
        logger.info(f"üí∞ Cost: {appointment.cost}")

        # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        logger.info("üîç –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
        try:
            if current_user.role != "reception":
                logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {current_user.username} –Ω–µ –∏–º–µ–µ—Ç —Ä–æ–ª–∏ reception")
                raise HTTPException(status_code=403, detail="Not authorized")
            logger.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞")
        except HTTPException:
            raise
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")
            logger.error(f"Traceback: {traceback.format_exc()}")
            raise HTTPException(status_code=500, detail=f"Authorization check error: {str(e)}")

        # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤—Ä–∞—á–∞
        logger.info("üîç –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤—Ä–∞—á–∞...")
        try:
            doctor = db.query(User).filter(User.id == appointment.doctor_id, User.role == "doctor").first()
            if not doctor:
                logger.warning(f"‚ö†Ô∏è –í—Ä–∞—á —Å ID {appointment.doctor_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                raise HTTPException(status_code=400, detail="Doctor not found")
            logger.info("‚úÖ –í—Ä–∞—á —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        except HTTPException:
            raise
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤—Ä–∞—á–∞: {str(e)}")
            logger.error(f"Traceback: {traceback.format_exc()}")
            raise HTTPException(status_code=500, detail=f"Doctor existence check error: {str(e)}")

        # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞
        logger.info("üîç –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞...")
        try:
            patient = db.query(PatientModel).filter(PatientModel.id == appointment.patient_id).first()
            if not patient:
                logger.warning(f"‚ö†Ô∏è –ü–∞—Ü–∏–µ–Ω—Ç —Å ID {appointment.patient_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                raise HTTPException(status_code=400, detail="Patient not found")
            logger.info("‚úÖ –ü–∞—Ü–∏–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        except HTTPException:
            raise
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞: {str(e)}")
            logger.error(f"Traceback: {traceback.format_exc()}")
            raise HTTPException(status_code=500, detail=f"Patient existence check error: {str(e)}")

        # –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Ä–∞—á–∞
        logger.info("üîç –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Ä–∞—á–∞...")
        try:
            existing_appointment = db.query(AppointmentModel).filter(
                AppointmentModel.doctor_id == appointment.doctor_id,
                AppointmentModel.date == appointment.date,
            ).first()
            if existing_appointment:
                logger.warning(f"‚ö†Ô∏è –í—Ä–∞—á {appointment.doctor_id} –∑–∞–Ω—è—Ç –Ω–∞ {appointment.date}")
                raise HTTPException(status_code=400, detail="Doctor is not available at this time")
            logger.info("‚úÖ –í—Ä–∞—á –¥–æ—Å—Ç—É–ø–µ–Ω")
        except HTTPException:
            raise
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Ä–∞—á–∞: {str(e)}")
            logger.error(f"Traceback: {traceback.format_exc()}")
            raise HTTPException(status_code=500, detail=f"Doctor availability check error: {str(e)}")

        # –®–∞–≥ 5: –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –ø—Ä–∏–µ–º–∞
        logger.info("üìù –®–∞–≥ 5: –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –ø—Ä–∏–µ–º–∞...")
        try:
            db_appointment = AppointmentModel(**appointment.dict())
            logger.info(f"   Appointment object created: {db_appointment}")
            logger.info("‚úÖ –û–±—ä–µ–∫—Ç –ø—Ä–∏–µ–º–∞ —Å–æ–∑–¥–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞ –ø—Ä–∏–µ–º–∞: {str(e)}")
            logger.error(f"Traceback: {traceback.format_exc()}")
            raise HTTPException(status_code=500, detail=f"Appointment object creation error: {str(e)}")

        # –®–∞–≥ 6: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–µ—Å—Å–∏—é –ë–î
        logger.info("üíæ –®–∞–≥ 6: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–µ–º–∞ –≤ –ë–î...")
        try:
            db.add(db_appointment)
            logger.info("   Appointment added to session")
            logger.info("‚úÖ –ü—Ä–∏–µ–º –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–µ—Å—Å–∏—é")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ —Å–µ—Å—Å–∏—é: {str(e)}")
            logger.error(f"Traceback: {traceback.format_exc()}")
            raise HTTPException(status_code=500, detail=f"Database session error: {str(e)}")

        # –®–∞–≥ 7: –ö–æ–º–º–∏—Ç –≤ –ë–î
        logger.info("üíæ –®–∞–≥ 7: –ö–æ–º–º–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ë–î...")
        try:
            db.commit()
            logger.info("   Commit successful")
            logger.info("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–º–º–∏—Ç–µ: {str(e)}")
            logger.error(f"Traceback: {traceback.format_exc()}")
            db.rollback()
            logger.info("   Rollback executed")
            raise HTTPException(status_code=500, detail=f"Database commit error: {str(e)}")

        # –®–∞–≥ 8: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
        logger.info("üîÑ –®–∞–≥ 8: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –ø—Ä–∏–µ–º–∞...")
        try:
            db.refresh(db_appointment)
            logger.info(f"   Appointment ID: {db_appointment.id}")
            logger.info("‚úÖ –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞: {str(e)}")
            logger.error(f"Traceback: {traceback.format_exc()}")
            # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º

        logger.info("=" * 80)
        logger.info("‚úÖ –°–û–ó–î–ê–ù–ò–ï –ü–†–ò–ï–ú–ê –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–û")
        logger.info(f"   Appointment ID: {db_appointment.id}")
        logger.info(f"   Doctor ID: {db_appointment.doctor_id}")
        logger.info(f"   Patient ID: {db_appointment.patient_id}")
        logger.info(f"   Date: {db_appointment.date}")
        logger.info(f"   Status: {db_appointment.status}")
        logger.info("=" * 80)

        return db_appointment

    except HTTPException:
        # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º HTTPException –¥–∞–ª—å—à–µ
        raise
    except Exception as e:
        logger.error("=" * 80)
        logger.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–†–ò –°–û–ó–î–ê–ù–ò–ò –ü–†–ò–ï–ú–ê")
        logger.error(f"Error type: {type(e).__name__}")
        logger.error(f"Error message: {str(e)}")
        logger.error(f"Traceback:\n{traceback.format_exc()}")
        logger.error("=" * 80)
        raise HTTPException(
            status_code=500,
            detail=f"Unexpected appointment creation error: {str(e)}"
        )

@router.get("/doctors/", response_model=List[UserProfile])
def get_doctors(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    if current_user.role != "reception":
        raise HTTPException(status_code=403, detail="Not authorized")
    doctors = db.query(User).filter(User.role == "doctor").all()
    return doctors

@router.get("/my", response_model=List[AppointmentWithDoctor])
def get_my_appointments(
    status: Optional[str] = Query(None, description="Filter by status"),
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    if current_user.role != "doctor":
        raise HTTPException(status_code=403, detail="Not authorized")
    query = db.query(AppointmentModel, PatientModel.full_name.label("patient_full_name")).join(
        PatientModel, AppointmentModel.patient_id == PatientModel.id
    ).filter(AppointmentModel.doctor_id == current_user.id)
    if status:
        query = query.filter(AppointmentModel.status == status)
    results = query.all()
    appointments = []
    for appointment, patient_full_name in results:
        appointment_data = AppointmentWithDoctor(
            id=appointment.id,
            patient_full_name=patient_full_name,
            doctor_id=appointment.doctor_id,
            patient_id=appointment.patient_id,
            date=appointment.date,
            status=appointment.status,
            notes=appointment.notes,
            cost=appointment.cost
        )
        appointments.append(appointment_data)
    return appointments

@router.patch("/my/{appointment_id}/finish", response_model=Appointment)
def finish_appointment(
    appointment_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    if current_user.role != "doctor":
        raise HTTPException(status_code=403, detail="Only doctors can finish appointments")

    appointment = db.query(AppointmentModel).filter(
        AppointmentModel.id == appointment_id,
        AppointmentModel.doctor_id == current_user.id
    ).first()

    if not appointment:
        raise HTTPException(status_code=404, detail="Appointment not found")

    appointment.status = "done"
    db.commit()
    db.refresh(appointment)
    return appointment

@router.patch("/my/{appointment_id}/cost", response_model=Appointment)
def update_appointment_cost(
    appointment_id: int,
    cost_update: AppointmentCostUpdate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    if current_user.role != "doctor":
        raise HTTPException(status_code=403, detail="Only doctors can update appointment cost")

    appointment = db.query(AppointmentModel).filter(
        AppointmentModel.id == appointment_id,
        AppointmentModel.doctor_id == current_user.id
    ).first()

    if not appointment:
        raise HTTPException(status_code=404, detail="Appointment not found")

    appointment.cost = cost_update.cost
    db.commit()
    db.refresh(appointment)
    return appointment


@router.get("/reception/done", response_model=List[AppointmentWithDoctor])
def get_done_appointments(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    if current_user.role != "reception":
        raise HTTPException(status_code=403, detail="Not authorized")
    query = db.query(AppointmentModel, PatientModel.full_name.label("patient_full_name")).join(
        PatientModel, AppointmentModel.patient_id == PatientModel.id
    ).filter(AppointmentModel.status == "done")
    results = query.all()
    appointments = []
    for appointment, patient_full_name in results:
        appointment_data = AppointmentWithDoctor(
            id=appointment.id,
            patient_full_name=patient_full_name,
            doctor_id=appointment.doctor_id,
            patient_id=appointment.patient_id,
            date=appointment.date,
            status=appointment.status,
            notes=appointment.notes,
            cost=appointment.cost
        )
        appointments.append(appointment_data)
    return appointments

@router.patch("/reception/{appointment_id}/pay", response_model=Appointment)
def pay_appointment(
    appointment_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    if current_user.role != "reception":
        raise HTTPException(status_code=403, detail="Not authorized")

    appointment = db.query(AppointmentModel).filter(AppointmentModel.id == appointment_id).first()

    if not appointment:
        raise HTTPException(status_code=404, detail="Appointment not found")

    if appointment.status != "done":
        raise HTTPException(status_code=400, detail="Appointment must be done before payment")

    appointment.status = "paid"
    db.commit()
    db.refresh(appointment)
    return appointment

@router.get("/patients/{patient_id}", response_model=Patient)
def get_patient_details(patient_id: int, db: Session = Depends(get_db), current_user: User = Depends(get_current_user)):
    if current_user.role != "doctor":
        raise HTTPException(status_code=403, detail="Not authorized")
    # Check if the patient is assigned to this doctor
    appointment = db.query(AppointmentModel).filter(
        AppointmentModel.patient_id == patient_id,
        AppointmentModel.doctor_id == current_user.id
    ).first()
    if not appointment:
        raise HTTPException(status_code=403, detail="Patient not assigned to this doctor")
    patient = db.query(PatientModel).filter(PatientModel.id == patient_id).first()
    if not patient:
        raise HTTPException(status_code=404, detail="Patient not found")
    return patient