from datetime import datetime, timedelta, timezone
from typing import Optional, Any
from jose import JWTError, jwt
from passlib.context import CryptContext
from app.core.config import settings
from pydantic import SecretStr
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

pwd_context = CryptContext(schemes=["argon2"], deprecated="auto")


def verify_password(plain_password: Any, hashed_password: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    """
    try:
        logger.info("üîê verify_password: –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è")
        logger.info(f"   Plain password type: {type(plain_password)}")
        logger.info(f"   Plain password repr: {repr(plain_password)}")
        logger.info(f"   Hashed password length: {len(hashed_password)}")
        logger.info(f"   Hashed password (first 30 chars): {hashed_password[:30]}...")
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
        password = _to_str_password(plain_password)
        logger.info(f"   Normalized password type: {type(password)}")
        logger.info(f"   Normalized password length: {len(password)}")
        
        # Truncate –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if len(password) > 72:
            logger.warning(f"   ‚ö†Ô∏è Password truncated from {len(password)} to 72 chars")
            password = password[:72]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞
        logger.info("   Calling pwd_context.verify()...")
        result = pwd_context.verify(password, hashed_password)
        logger.info(f"   Verification result: {result}")
        
        if result:
            logger.info("‚úÖ verify_password: –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π")
        else:
            logger.warning("‚ö†Ô∏è verify_password: –ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π")
        
        return result
        
    except Exception as e:
        logger.error(f"‚ùå verify_password: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—Ä–æ–ª—è: {str(e)}")
        logger.error(f"   Exception type: {type(e).__name__}")
        import traceback
        logger.error(f"   Traceback: {traceback.format_exc()}")
        raise


def _to_str_password(password: Any) -> str:
    """
    –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    """
    logger.info("üîÑ _to_str_password: –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è")
    logger.info(f"   Input type: {type(password)}")
    
    if isinstance(password, SecretStr):
        logger.info("   Converting from SecretStr")
        result = password.get_secret_value()
    elif password is None:
        logger.warning("   ‚ö†Ô∏è Password is None, returning empty string")
        result = ""
    else:
        logger.info("   Converting to str")
        result = str(password)
    
    logger.info(f"   Result type: {type(result)}")
    logger.info(f"   Result length: {len(result)}")
    
    return result


def get_password_hash(password: Any) -> str:
    """
    –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    """
    try:
        logger.info("üîê get_password_hash: –ù–∞—á–∞–ª–æ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è")
        logger.info(f"   Input type: {type(password)}")
        logger.info(f"   Input repr: {repr(password)}")
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        pw = _to_str_password(password)
        logger.info(f"   Normalized password length: {len(pw)}")
        
        # Truncate –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        if len(pw) > 72:
            logger.warning(f"   ‚ö†Ô∏è Truncating password from {len(pw)} to 72 chars")
            pw = pw[:72]
        
        # –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        logger.info("   Calling pwd_context.hash()...")
        hashed = pwd_context.hash(pw)
        logger.info(f"   Hash generated, length: {len(hashed)}")
        logger.info(f"   Hash (first 30 chars): {hashed[:30]}...")
        
        logger.info("‚úÖ get_password_hash: –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω")
        return hashed
        
    except Exception as e:
        logger.error(f"‚ùå get_password_hash: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")
        logger.error(f"   Exception type: {type(e).__name__}")
        import traceback
        logger.error(f"   Traceback: {traceback.format_exc()}")
        raise


def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    """
    try:
        logger.info("üîë create_access_token: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞")
        logger.info(f"   Data: {data}")
        
        to_encode = data.copy()
        
        if expires_delta:
            expire = datetime.now(timezone.utc) + expires_delta
            logger.info(f"   Custom expiration delta: {expires_delta}")
        else:
            expire = datetime.now(timezone.utc) + timedelta(minutes=settings.access_token_expire_minutes)
            logger.info(f"   Default expiration: {settings.access_token_expire_minutes} minutes")
        
        to_encode.update({"exp": expire})
        logger.info(f"   Token will expire at: {expire}")
        
        encoded_jwt = jwt.encode(to_encode, settings.secret_key, algorithm=settings.algorithm)
        logger.info(f"   Token created, length: {len(encoded_jwt)}")
        logger.info(f"   Token (first 30 chars): {encoded_jwt[:30]}...")
        
        logger.info("‚úÖ create_access_token: –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
        return encoded_jwt
        
    except Exception as e:
        logger.error(f"‚ùå create_access_token: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {str(e)}")
        import traceback
        logger.error(f"   Traceback: {traceback.format_exc()}")
        raise


def decode_access_token(token: str):
    """
    –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    """
    try:
        logger.info("üîì decode_access_token: –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞")
        logger.info(f"   Token length: {len(token)}")
        logger.info(f"   Token (first 30 chars): {token[:30]}...")
        
        payload = jwt.decode(token, settings.secret_key, algorithms=[settings.algorithm])
        logger.info(f"   Payload decoded: {payload}")
        
        logger.info("‚úÖ decode_access_token: –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω")
        return payload
        
    except JWTError as e:
        logger.warning(f"‚ö†Ô∏è decode_access_token: JWT –æ—à–∏–±–∫–∞: {str(e)}")
        return None
    except Exception as e:
        logger.error(f"‚ùå decode_access_token: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        import traceback
        logger.error(f"   Traceback: {traceback.format_exc()}")
        return None
