#!/usr/bin/env python3
"""
üîß –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ –° ALEMBIC
–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ alembic.ini –∏ app/core/config.py
"""

import os
import re
import shutil
from datetime import datetime

# –¶–≤–µ—Ç–∞
class Colors:
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    END = '\033[0m'

def print_header(text):
    print(f"\n{Colors.CYAN}{'='*80}")
    print(f"{text}")
    print(f"{'='*80}{Colors.END}\n")

def print_success(text):
    print(f"{Colors.GREEN}‚úÖ {text}{Colors.END}")

def print_warning(text):
    print(f"{Colors.YELLOW}‚ö†Ô∏è  {text}{Colors.END}")

def print_error(text):
    print(f"{Colors.RED}‚ùå {text}{Colors.END}")

def print_info(text):
    print(f"{Colors.BLUE}‚ÑπÔ∏è  {text}{Colors.END}")

def backup_file(filepath):
    """–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞"""
    if os.path.exists(filepath):
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        backup_path = f"{filepath}.backup_{timestamp}"
        shutil.copy2(filepath, backup_path)
        print_success(f"–°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
        return backup_path
    return None

def extract_database_url(filepath):
    """–ò–∑–≤–ª–µ—á—å DATABASE_URL –∏–∑ —Ñ–∞–π–ª–∞"""
    if not os.path.exists(filepath):
        return None
    
    with open(filepath, 'r') as f:
        content = f.read()
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ DATABASE_URL
    patterns = [
        r'database_url[:\s]*str\s*=\s*["\']([^"\']+)["\']',  # Python config
        r'sqlalchemy\.url\s*=\s*(.+)',  # alembic.ini
    ]
    
    for pattern in patterns:
        match = re.search(pattern, content, re.IGNORECASE)
        if match:
            url = match.group(1).strip()
            return url
    
    return None

def update_alembic_ini(new_database_url):
    """–û–±–Ω–æ–≤–∏—Ç—å DATABASE_URL –≤ alembic.ini"""
    if not os.path.exists('alembic.ini'):
        print_error("–§–∞–π–ª alembic.ini –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    # –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_file('alembic.ini')
    
    # –ü—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    with open('alembic.ini', 'r') as f:
        content = f.read()
    
    # –ó–∞–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    new_content = re.sub(
        r'(sqlalchemy\.url\s*=\s*)(.+)',
        f'\\1{new_database_url}',
        content
    )
    
    # –ó–∞–ø–∏—Å–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ
    with open('alembic.ini', 'w') as f:
        f.write(new_content)
    
    print_success("–§–∞–π–ª alembic.ini –æ–±–Ω–æ–≤–ª–µ–Ω!")
    return True

def update_config_py(new_database_url):
    """–û–±–Ω–æ–≤–∏—Ç—å DATABASE_URL –≤ app/core/config.py"""
    if not os.path.exists('app/core/config.py'):
        print_error("–§–∞–π–ª app/core/config.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    # –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_file('app/core/config.py')
    
    # –ü—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    with open('app/core/config.py', 'r') as f:
        content = f.read()
    
    # –ó–∞–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    new_content = re.sub(
        r'(database_url:\s*str\s*=\s*["\'])([^"\']+)(["\'])',
        f'\\1{new_database_url}\\3',
        content
    )
    
    # –ó–∞–ø–∏—Å–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ
    with open('app/core/config.py', 'w') as f:
        f.write(new_content)
    
    print_success("–§–∞–π–ª app/core/config.py –æ–±–Ω–æ–≤–ª–µ–Ω!")
    return True

def main():
    print_header("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ –° ALEMBIC –ò NEON POSTGRESQL")
    
    print_info("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...\n")
    
    # 1. –ò–∑–≤–ª–µ—á—å DATABASE_URL –∏–∑ –æ–±–æ–∏—Ö —Ñ–∞–π–ª–æ–≤
    alembic_url = extract_database_url('alembic.ini')
    config_url = extract_database_url('app/core/config.py')
    
    print(f"{Colors.BLUE}üìã –¢–ï–ö–£–©–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò:{Colors.END}")
    print(f"\n1Ô∏è‚É£  alembic.ini:")
    if alembic_url:
        print(f"   {alembic_url[:80]}...")
        if 'ep-proud-art' in alembic_url:
            print(f"   {Colors.RED}‚ùå –°–¢–ê–†–ê–Ø –ë–î (ep-proud-art){Colors.END}")
        elif 'ep-calm-dew' in alembic_url:
            print(f"   {Colors.GREEN}‚úÖ –ù–û–í–ê–Ø –ë–î (ep-calm-dew){Colors.END}")
    else:
        print(f"   {Colors.RED}–ù–µ –Ω–∞–π–¥–µ–Ω–æ{Colors.END}")
    
    print(f"\n2Ô∏è‚É£  app/core/config.py:")
    if config_url:
        print(f"   {config_url[:80]}...")
        if 'ep-proud-art' in config_url:
            print(f"   {Colors.RED}‚ùå –°–¢–ê–†–ê–Ø –ë–î (ep-proud-art){Colors.END}")
        elif 'ep-calm-dew' in config_url:
            print(f"   {Colors.GREEN}‚úÖ –ù–û–í–ê–Ø –ë–î (ep-calm-dew){Colors.END}")
    else:
        print(f"   {Colors.RED}–ù–µ –Ω–∞–π–¥–µ–Ω–æ{Colors.END}")
    
    # 2. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫—É—é –ë–î –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    print(f"\n{Colors.YELLOW}{'='*80}{Colors.END}")
    
    if not alembic_url or not config_url:
        print_error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
    if alembic_url != config_url:
        print_warning("–û–ë–ù–ê–†–£–ñ–ï–ù–û –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï!")
        print_info("alembic.ini –∏ app/core/config.py –∏—Å–ø–æ–ª—å–∑—É—é—Ç –†–ê–ó–ù–´–ï –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        print()
        
        # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫—É—é –ë–î –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
        print(f"{Colors.CYAN}–ö–∞–∫—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?{Colors.END}")
        print(f"  1) –ù–û–í–£–Æ –ë–î (ep-calm-dew) - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è")
        print(f"  2) –°–¢–ê–†–£–Æ –ë–î (ep-proud-art)")
        print(f"  3) –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é")
        print(f"  4) –û—Ç–º–µ–Ω–∞")
        
        choice = input(f"\n{Colors.YELLOW}–í–∞—à –≤—ã–±–æ—Ä (1-4): {Colors.END}").strip()
        
        if choice == '1':
            # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—É—é –ë–î
            if 'ep-calm-dew' in config_url:
                target_url = config_url
                print_info("–ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –Ω–æ–≤–∞—è –ë–î –∏–∑ app/core/config.py")
            else:
                target_url = "postgresql://neondb_owner:npg_wo9MZKGJ1zym@ep-calm-dew-a86c7qwq-pooler.eastus2.azure.neon.tech/neondb?sslmode=require&channel_binding=require"
                print_info("–ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –Ω–æ–≤–∞—è –ë–î (–≤–≤–µ–¥–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é)")
        
        elif choice == '2':
            # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—É—é –ë–î
            if 'ep-proud-art' in alembic_url:
                target_url = alembic_url
                print_info("–ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Å—Ç–∞—Ä–∞—è –ë–î –∏–∑ alembic.ini")
            else:
                target_url = "postgresql://neondb_owner:npg_wo9MZKGJ1zym@ep-proud-art-a8xtxs9t-pooler.eastus2.azure.neon.tech/neondb?sslmode=require"
                print_info("–ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Å—Ç–∞—Ä–∞—è –ë–î (–≤–≤–µ–¥–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é)")
        
        elif choice == '3':
            # –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é
            print()
            target_url = input(f"{Colors.YELLOW}–í–≤–µ–¥–∏—Ç–µ DATABASE_URL: {Colors.END}").strip()
            if not target_url:
                print_error("URL –Ω–µ –≤–≤–µ–¥–µ–Ω. –û—Ç–º–µ–Ω–∞.")
                return
        
        else:
            print_info("–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏")
            return
        
        # –û–±–Ω–æ–≤–∏—Ç—å –æ–±–∞ —Ñ–∞–π–ª–∞
        print()
        print_header("üìù –û–ë–ù–û–í–õ–ï–ù–ò–ï –§–ê–ô–õ–û–í")
        
        update_alembic_ini(target_url)
        update_config_py(target_url)
        
        print()
        print_success("–§–∞–π–ª—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!")
        print_info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: {target_url[:60]}...")
        
    else:
        print_success("–§–∞–π–ª—ã —É–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!")
        print_info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: {alembic_url[:60]}...")
    
    # 3. –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
    print()
    print_header("üìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò")
    print("""
1Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:
   git diff alembic.ini
   git diff app/core/config.py

2Ô∏è‚É£  –ü—Ä–∏–º–µ–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏:
   alembic upgrade head

3Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é:
   alembic current

4Ô∏è‚É£  –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –º–∏–≥—Ä–∞—Ü–∏—é:
   alembic revision --autogenerate -m "–æ–ø–∏—Å–∞–Ω–∏–µ"

5Ô∏è‚É£  –ó–∞–∫–æ–º–º–∏—Ç—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:
   git add alembic.ini app/core/config.py
   git commit -m "Fix: sync database URLs in alembic.ini and config.py"
   git push origin main
    """)
    
    print_header("‚úÖ –ì–û–¢–û–í–û!")

if __name__ == "__main__":
    main()
