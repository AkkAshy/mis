#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Neon PostgreSQL
–°–æ–∑–¥–∞–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è Medical Information System
"""

import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from sqlalchemy import create_engine, text
from app.db.base import Base
from app.core.config import settings

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("=" * 80)
    print("üóÑÔ∏è  –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–• NEON")
    print("=" * 80)
    print()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (—Å–∫—Ä—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å)
    db_url = settings.database_url
    if "@" in db_url:
        parts = db_url.split("@")
        user_part = parts[0].split("://")[1].split(":")[0]
        db_url_safe = db_url.replace(parts[0].split("://")[1].split(":")[1], "***")
        print(f"üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫: {db_url_safe}")
    else:
        print(f"üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    print()
    
    try:
        # –°–æ–∑–¥–∞–µ–º engine
        print("üîß –°–æ–∑–¥–∞–Ω–∏–µ engine...")
        engine = create_engine(settings.database_url)
        print("‚úÖ Engine —Å–æ–∑–¥–∞–Ω")
        print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        with engine.connect() as conn:
            result = conn.execute(text("SELECT version()"))
            version = result.fetchone()[0]
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìä PostgreSQL –≤–µ—Ä—Å–∏—è: {version[:50]}...")
        print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü...")
        with engine.connect() as conn:
            result = conn.execute(text("""
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_schema = 'public'
                ORDER BY table_name
            """))
            existing_tables = [row[0] for row in result.fetchall()]
            
            if existing_tables:
                print(f"üìã –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(existing_tables)}")
                for table in existing_tables:
                    print(f"   - {table}")
            else:
                print("üìã –¢–∞–±–ª–∏—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (–±–∞–∑–∞ –ø—É—Å—Ç–∞—è)")
        print()
        
        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
        print("üî® –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
        Base.metadata.create_all(bind=engine)
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")
        print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü...")
        with engine.connect() as conn:
            result = conn.execute(text("""
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_schema = 'public'
                ORDER BY table_name
            """))
            tables = result.fetchall()
            
            if tables:
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
                for table in tables:
                    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫
                    col_result = conn.execute(text(f"""
                        SELECT COUNT(*) 
                        FROM information_schema.columns 
                        WHERE table_name = '{table[0]}'
                    """))
                    col_count = col_result.fetchone()[0]
                    print(f"   ‚úì {table[0]} ({col_count} –∫–æ–ª–æ–Ω–æ–∫)")
            else:
                print("‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü—ã –Ω–µ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã")
        
        print()
        print("=" * 80)
        print("‚úÖ –ë–ê–ó–ê –î–ê–ù–ù–´–• –£–°–ü–ï–®–ù–û –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ê!")
        print("=" * 80)
        print()
        print("üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("   1. –ó–∞–¥–µ–ø–ª–æ–π—Ç–µ –Ω–∞ Vercel:")
        print("      git add .")
        print("      git commit -m 'Initialize database'")
        print("      git push origin main")
        print()
        print("   2. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        print()
        print("   3. –ï—Å–ª–∏ –Ω—É–∂–Ω—ã –º–∏–≥—Ä–∞—Ü–∏–∏ Alembic:")
        print("      alembic upgrade head")
        print()
        
        return True
        
    except Exception as e:
        print()
        print("=" * 80)
        print("‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò –ë–ê–ó–´ –î–ê–ù–ù–´–•")
        print("=" * 80)
        print(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")
        print()
        
        import traceback
        print("Traceback:")
        print(traceback.format_exc())
        print()
        
        print("üîß –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("   1. –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è DATABASE_URL")
        print("   2. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö Neon –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        print("   3. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        print()
        
        return False
        
    finally:
        try:
            engine.dispose()
        except:
            pass

if __name__ == "__main__":
    print()
    success = init_database()
    print()
    
    if success:
        sys.exit(0)
    else:
        sys.exit(1)